using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Net;
using System.Net.Mail;
using System.Text;

namespace MadHotSpot.Extentions
{
    public class SendEmail
    {
        public Boolean Send(string to, string subject, string message, string name, string HotelCode, string Password, string template)
        {

            var content = Encoding.UTF8.GetString(Convert.FromBase64String(emailtemplate(template)));

            content = content.Replace("[HotelCode]", HotelCode);
            content = content.Replace("[UserName]", name);
            content = content.Replace("[Password]", Password);

            //if (template != "newcontact") content = content.Replace("[sifre]", message); else content = content.Replace("[mesaj]", message);
            //content = content.Replace("[tarih]", DateTime.Now.ToString("dd.MM.yyyy"));

            var LoginInfo = new NetworkCredential("developer@selinushms.com", "11223344Mad");
            var client = new SmtpClient { Port = 587, Host = "smtp.yandex.com.tr", EnableSsl = true, Credentials = LoginInfo };

            var mail = new MailMessage
            {
                From = new MailAddress("developer@selinushms.com", subject),
                Subject = subject,
                Body = content,
                IsBodyHtml = true
            };

            mail.To.Add(to);  // Gidecek adres ekleniyor

            try
            {
                client.Send(mail);
                return true;
            }
            catch (Exception ex)
            {

                return false;

                throw;
            }

        }

        string emailtemplate(string typemail)
        {
            switch (typemail)
            {
                case "IlkKayit":

                    return "";
            }

            return "";
        }
    }
}
